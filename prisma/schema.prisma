generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Users {
  id        Int      @id @default(autoincrement())
  // email     String   @unique
  name      String   @unique
  password  String
  role      Roles    @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Events {
  id          Int           @id @default(autoincrement())
  tournament  String
  gameName    Games         @relation(fields: [gameNameId], references: [id])
  gameNameId  Int
  matchType   MatchType
  timeOfStart DateTime
  status      StatusOfEvent @default(WILL_START)
  command1    Commands      @relation("RelationForCommand1", fields: [command1Id], references: [id])
  command1Id  Int
  command2    Commands      @relation("RelationForCommand2", fields: [command2Id], references: [id])
  command2Id  Int

  odd1      Decimal
  odd2      Decimal
  contract  Contracts?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Commands {
  id               Int      @id @default(autoincrement())
  name             String
  gameName         Games    @relation(fields: [gameNameId], references: [id])
  gameNameId       Int
  logo             String
  enentForCommand1 Events[] @relation("RelationForCommand1")
  enentForCommand2 Events[] @relation("RelationForCommand2")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Games {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  logo        String
  events      Events[]
  commands    Commands[]
  Tournaments Tournaments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Contracts {
  id             Int    @id @default(autoincrement())
  event          Events @relation(fields: [eventId], references: [id])
  eventId        Int    @unique
  contract_props String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Tournaments {
  id     Int    @id @default(autoincrement())
  name   String
  logo   String
  game   Games  @relation(fields: [gameId], references: [id])
  gameId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bets {
  id     String @id @default(uuid())
}

enum Roles {
  USER
  ADMIN
}

enum MatchType {
  BEST_OF_1
  BEST_OF_3
  BEST_OF_5
}

enum StatusOfEvent {
  WILL_START
  ACTIVE
  ENDED
  ARCHIVED
}
